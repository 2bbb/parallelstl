/*
    Copyright (c) 2017 Intel Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.




*/

#ifndef __PSTL_memory_H
#define __PSTL_memory_H

#include "_internal/pstl_config.h"
#include "_internal/memory_impl.h"

namespace std {

// [uninitialized.copy]

template<class ExecutionPolicy, class InputIterator, class ForwardIterator>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, ForwardIterator>
uninitialized_copy(ExecutionPolicy&& exec, InputIterator first, InputIterator last, ForwardIterator result) {
    return __icp_algorithm::pattern_uninitialized_copy(first, last, result,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, InputIterator, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, InputIterator, ForwardIterator>(exec));
}

template<class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, ForwardIterator>
uninitialized_copy_n(ExecutionPolicy&& exec, InputIterator first, Size n, ForwardIterator result) {
    return __icp_algorithm::pattern_uninitialized_copy_n(first, n, result,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, InputIterator, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, InputIterator, ForwardIterator>(exec));
}

// [uninitialized.move]

template<class ExecutionPolicy, class InputIterator, class ForwardIterator>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, ForwardIterator>
uninitialized_move(ExecutionPolicy&& exec, InputIterator first, InputIterator last, ForwardIterator result) {
    return __icp_algorithm::pattern_uninitialized_move(first, last, result,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, InputIterator, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, InputIterator, ForwardIterator>(exec));
}

template<class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, ForwardIterator>
uninitialized_move_n(ExecutionPolicy&& exec, InputIterator first, Size n, ForwardIterator result) {
    return __icp_algorithm::pattern_uninitialized_move_n(first, n, result,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, InputIterator, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, InputIterator, ForwardIterator>(exec));
}

// [uninitialized.fill]

template<class ExecutionPolicy, class ForwardIterator, class T>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, void>
uninitialized_fill(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last, const T& x) {
    return __icp_algorithm::pattern_uninitialized_fill(first, last, x,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, ForwardIterator>(exec));
}

template<class ExecutionPolicy, class ForwardIterator, class Size, class T>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, ForwardIterator>
uninitialized_fill_n(ExecutionPolicy&& exec, ForwardIterator first, Size n, const T& x) {
    return __icp_algorithm::pattern_uninitialized_fill_n(first, n, x,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, ForwardIterator>(exec));
}

// [specialized.destroy]

template <class ExecutionPolicy, class ForwardIterator>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, void>
destroy(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last) {
    __icp_algorithm::pattern_destroy(first, last,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, ForwardIterator>(exec));
}

template <class ExecutionPolicy, class ForwardIterator, class Size>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, ForwardIterator>
destroy_n(ExecutionPolicy&& exec, ForwardIterator first, Size n) {
    return __icp_algorithm::pattern_destroy_n(first, n,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, ForwardIterator>(exec));
}

// [uninitialized.construct.default]

template <class ExecutionPolicy, class ForwardIterator>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, void>
uninitialized_default_construct(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last) {
    __icp_algorithm::pattern_uninitialized_default_construct(first, last,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, ForwardIterator>(exec));
}

template <class ExecutionPolicy, class ForwardIterator, class Size>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, ForwardIterator>
uninitialized_default_construct_n(ExecutionPolicy&& exec, ForwardIterator first, Size n) {
    return __icp_algorithm::pattern_uninitialized_default_construct_n(first, n,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, ForwardIterator>(exec));
}

// [uninitialized.construct.value]

template <class ExecutionPolicy, class ForwardIterator>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, void>
uninitialized_value_construct(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last) {
    __icp_algorithm::pattern_uninitialized_value_construct(first, last,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, ForwardIterator>(exec));
}

template <class ExecutionPolicy, class ForwardIterator, class Size>
__icp_algorithm::enable_if_execution_policy<ExecutionPolicy, ForwardIterator>
uninitialized_value_construct_n(ExecutionPolicy&& exec, ForwardIterator first, Size n) {
    return __icp_algorithm::pattern_uninitialized_value_construct_n(first, n,
        __icp_algorithm::is_vectorization_preferred<ExecutionPolicy, ForwardIterator>(exec),
        __icp_algorithm::is_parallelization_preferred<ExecutionPolicy, ForwardIterator>(exec));
}

} // namespace std
#endif /*__PSTL_memory_H */
